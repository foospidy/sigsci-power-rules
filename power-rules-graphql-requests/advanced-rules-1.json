{
  "preLateRule": "",
  "initRule": "# NAME: GraphQL Requests\n# DESCRIPTION: Identifies and inspects requests associated with GraphQL.\n# Inspections include:\n# Requests to graphiql, which should never be enabled in production servers.\n# GraphQL requests not properly formatted.\n# Injection attacks on raw graphql posts.\n# Nested queries that could be abused to cause a DoS.\n# REFERENCES: http://graphql.org/learn/serving-over-http/\n# DEPENDENCY: None\n#\n\n# Regex to identify the depth of a graphql query.\n# The max depth is specified by the number in the regex.\n$max_depth := Array `(?s){([^}]*?{){5}`\n\n$.Set \"GraphQLNestedMatcher\" (NewRegexpMatcher $max_depth)",
  "postEarlyRule": "",
  "sampleResponse": "HTTP/1.1 200 OK\nServer: nginx\nDate: Fri, 21 Aug 2015 21:30:50 GMT\nContent-Type: text/html; charset=utf-8\nConnection: keep-alive\nContent-Length: 0\nx-xss-protection: 1; mode=block\nx-content-type-options: nosniff\npragma: no-cache\nx-frame-options: SAMEORIGIN\nStrict-Transport-Security: max-age=15552000; includeSubDomains\nX-Request-ID: 123456789",
  "postRule": "",
  "preRule": "if $.Path | lower | Equal \"/graphiql\"\n # graphiql should never be enabled in production\n $.AddSignal \"site.graphiql\" \"PATH\" $.Path $ruleid\nend\n\nif $.Path | lower | Equal \"/graphql\"\n $.AddSignal \"site.graphql-request\" \"PATH\" $.Path $ruleid\n\n if $.Method | upper | Equal \"GET\"\n $query := \"query\" | Lookup $.QueryArgs\n if $query\n #$.AddSignal \"site.graphql-query\" \"QUERYARGS\" $query $ruleid\n\n if $query | $.Config.GraphQLNestedMatcher.MatchOne\n $.AddSignal \"site.graphql-dos\" \"QUERYARGS\" $query $ruleid\n end\n end\n end\n\n if $.Method | upper | Equal \"POST\"\n $content_type := \"Content-Type\" | Lookup $.RequestHeaders\n if or (\"application/json\" | Equal $content_type) (\"application/graphql\" | Equal $content_type)\n if $.PostBody | len | Equal 0\n $.AddSignal \"site.graphql-invalid\" \"POSTBODY\" \"Empty Query\" $ruleid\n else\n #$.AddSignal \"site.graphql-body\" \"POSTBODY\" $.PostBody $ruleid\n if \"application/graphql\" | Equal $content_type\n # Graphql server treats body as query\n\n # libinjection\n with (libinjection $.PostBody)\n $.AddSignal . \"POSTBODY\" (printf \"%s\" $.PostBody) \"LIBINJECTION\"\n end\n # end libinjection\n\n # cmdexe\n $det := IsCmdExe $.PostBody\n if $det.Match\n $.AddSignal \"CMDEXE\" \"POSTBODY\" (printf \"%s\" $.PostBody) \"CMDEXEV3\"\n end\n # end cmdexe\n\n # codeinjection\n if gt (len $.PostBody) 128\n $det := IsCodeInjectionPhp $.PostBody 128\n if $det.Match\n $det := IsCodeInjectionPhp $.PostBody 127\n if $det.Match\n $.AddSignal \"CODEINJECTION\" \"POST\" $.PostBody \"CODEINJECTIONV2\"\n end\n end\n else\n $det := IsCodeInjectionPhp $.PostBody 0\n if $det.Match\n $.AddSignal \"CODEINJECTION\" \"POST\" $.PostBody \"CODEINJECTIONV2\"\n end\n end\n # end codeinjection\n\n if $.PostBody | $.Config.GraphQLNestedMatcher.MatchOne\n $.AddSignal \"site.graphql-dos\" \"QUERYARGS\" $.PostBody $ruleid\n end\n else\n # Graphql server expects json with query attribute\n range $.PostArgs\n $key := (index . 0)\n $val := (index . 1)\n\n if not ($val | StringContainsQ \"\\\"query\\\"\")\n # body should/must contain a query attribute.\n $.AddSignal \"site.graphql-invalid\" \"POSTBODY\" \"No query attribute\" $ruleid\n else\n # if there is a query check for nested limit\n if $val| $.Config.GraphQLNestedMatcher.MatchOne\n $.AddSignal \"site.graphql-dos\" \"QUERYARGS\" $val $ruleid\n end\n end\n end\n end\n end\n else\n $.AddSignal \"site.graphql-invalid\" \"HEADERIN\" (printf \"Content-Type: %s\" $content_type) $ruleid\n end\n end\nend",
  "preEarlyRule": "",
  "sampleRequest": "POST /graphql HTTP/1.1\nHost: sample.foo\nAccept-Encoding: gzip, deflate\nAccept-Language: en-us\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nConnection: keep-alive\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 10000\nCookie:\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_4) AppleWebKit/600.7.12 (KHTML, like Gecko) Version/8.0.7 Safari/600.7.12\nCache-Control: max-age=0\nX-Forwarded-For: 127.0.0.1\nX-Forwarded-Proto: https\n\npostkey1=value1&post2=value2",
  "shortName": "GraphQL Requests",
  "postLateRule": "",
  "enabled": true
}
